generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model ActivityRecord {
  id               String   @id @default(uuid())
  timestamp        DateTime @default(now())
  posyanduName     String
  activityDate     DateTime @map("activity_date")
  sasaranBalita    Int      @map("sasaran_balita")
  sasaranBumil     Int      @map("sasaran_bumil")
  sasaranRemaja    Int      @map("sasaran_remaja")
  sasaranLansia    Int      @map("sasaran_lansia")
  sasaranBusu      Int      @map("sasaran_busu")
  sasaranBayi      Int      @map("sasaran_bayi")
  sasaranDewasa    Int      @map("sasaran_dewasa")
  pengunjungBalita Int      @map("pengunjung_balita")
  pengunjungBumil  Int      @map("pengunjung_bumil")
  pengunjungRemaja Int      @map("pengunjung_remaja")
  pengunjungLansia Int      @map("pengunjung_lansia")
  pengunjungBusu   Int      @map("pengunjung_busu")
  pengunjungBayi   Int      @map("pengunjung_bayi")
  pengunjungDewasa Int      @map("pengunjung_dewasa")
  fotoUrl          String?  @map("foto_url")
  pengunjungBufas  Int      @map("pengunjung_bufas")
  sasaranBufas     Int      @map("sasaran_bufas")

  @@map("activity_records")
}

model AttendanceRecord {
  id             String   @id @default(uuid())
  timestamp      DateTime @default(now())
  posyanduName   String
  fullName       String   @map("full_name")
  attendanceDate DateTime @map("attendance_date")
  scheduleId     String   @map("schedule_id")
  schedule       AttendanceSchedule @relation(fields: [scheduleId], references: [id])

  @@map("attendance_records")
}

model AttendanceSchedule {
  id              String   @id @default(uuid())
  scheduleDate    DateTime @unique @map("schedule_date")
  isActive        Boolean  @default(true) @map("is_active")
  createdAt       DateTime @default(now()) @map("created_at")
  updatedAt       DateTime @updatedAt @map("updated_at")
  attendanceRecords AttendanceRecord[]

  @@map("attendance_schedules")
}

model AttendanceConfig {
  id          String   @id @default(uuid())
  configDate  DateTime @unique @map("config_date")
  createdAt   DateTime @default(now()) @map("created_at")
  updatedAt   DateTime @updatedAt @map("updated_at")

  @@map("attendance_configs")
}

model User {
  id           String       @id @default(uuid())
  email        String       @unique
  fullName     String?      @map("full_name")
  posyanduName String?      @map("posyandu_name")
  password     String
  role         Role         @default(USER)
  username     String       @unique
  permissions  Permission[] @relation("PermissionToUser")

  @@map("users")
}

model Permission {
  id    String @id @default(uuid())
  name  String @unique
  users User[] @relation("PermissionToUser")

  @@map("permissions")
}

enum Role {
  ADMIN
  USER
}

model Child {
  id           String         @id @default(uuid())
  fullName     String         @map("full_name")
  dateOfBirth  DateTime       @map("date_of_birth")
  gender       String
  posyanduName String         @map("posyandu_name")
  stuntingRecords StuntingRecord[]

  @@map("children")
}

model StuntingRecord {
  id           String   @id @default(uuid())
  childId      String   @map("child_id")
  child        Child    @relation(fields: [childId], references: [id])
  height          Float
  weight          Float
  headCircumference Float? @map("head_circumference")
  armCircumference  Float? @map("arm_circumference")
  weightForAgeZScore Float? @map("weight_for_age_z_score")
  heightForAgeZScore Float? @map("height_for_age_z_score")
  weightForHeightZScore Float? @map("weight_for_height_z_score")
  measurementDate DateTime @map("measurement_date")

  @@map("stunting_records")
}
