generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model ActivityRecord {
  id               String   @id @default(uuid())
  timestamp        DateTime @default(now())
  posyanduName     String
  activityDate     DateTime @map("activity_date")
  sasaranBalita    Int      @map("sasaran_balita")
  sasaranBumil     Int      @map("sasaran_bumil")
  sasaranRemaja    Int      @map("sasaran_remaja")
  sasaranLansia    Int      @map("sasaran_lansia")
  sasaranBusu      Int      @map("sasaran_busu")
  sasaranBayi      Int      @map("sasaran_bayi")
  sasaranDewasa    Int      @map("sasaran_dewasa")
  pengunjungBalita Int      @map("pengunjung_balita")
  pengunjungBumil  Int      @map("pengunjung_bumil")
  pengunjungRemaja Int      @map("pengunjung_remaja")
  pengunjungLansia Int      @map("pengunjung_lansia")
  pengunjungBusu   Int      @map("pengunjung_busu")
  pengunjungBayi   Int      @map("pengunjung_bayi")
  pengunjungDewasa Int      @map("pengunjung_dewasa")
  fotoUrl          String?  @map("foto_url")
  pengunjungBufas  Int      @map("pengunjung_bufas")
  sasaranBufas     Int      @map("sasaran_bufas")
  visitors         Visitor[]

  @@map("activity_records")
}

model AttendanceRecord {
  id             String   @id @default(uuid())
  timestamp      DateTime @default(now())
  posyanduName   String
  fullName       String   @map("full_name")
  attendanceDate DateTime @map("attendance_date")
  scheduleId     String   @map("schedule_id")
  schedule       AttendanceSchedule @relation(fields: [scheduleId], references: [id])

  @@map("attendance_records")
}

model AttendanceSchedule {
  id              String   @id @default(uuid())
  scheduleDate    DateTime @unique @map("schedule_date")
  isActive        Boolean  @default(true) @map("is_active")
  createdAt       DateTime @default(now()) @map("created_at")
  updatedAt       DateTime @updatedAt @map("updated_at")
  attendanceRecords AttendanceRecord[]

  @@map("attendance_schedules")
}

model AttendanceConfig {
  id           String   @id @default(uuid())
  configDate   DateTime @map("config_date")
  posyanduName String   @map("posyandu_name")
  createdAt    DateTime @default(now()) @map("created_at")
  updatedAt    DateTime @updatedAt @map("updated_at")

  @@unique([configDate, posyanduName], map: "attendance_configs_config_date_posyandu_name_key")
  @@map("attendance_configs")
}

model User {
  id           String       @id @default(uuid())
  email        String       @unique
  fullName     String?      @map("full_name")
  posyanduName String?      @map("posyandu_name")
  password     String
  role         Role         @default(USER)
  username     String       @unique
  permissions  Permission[] @relation("PermissionToUser")

  @@map("users")
}

model Permission {
  id    String @id @default(uuid())
  name  String @unique
  users User[] @relation("PermissionToUser")

  @@map("permissions")
}

enum Role {
  ADMIN
  USER
}

model Visitor {
  id              String        @id @default(uuid())
  createdAt       DateTime      @default(now())
  name            String
  birthDate       DateTime      @map("birth_date")
  gender          String
  category        String
  posyanduName    String        @map("posyandu_name")
  activityRecord  ActivityRecord? @relation(fields: [activityRecordId], references: [id])
  activityRecordId String?       @map("activity_record_id")
  examinations    ExaminationRecord[]

  @@map("visitors")
}

model ExaminationRecord {
  id              String        @id @default(uuid())
  createdAt       DateTime      @default(now())
  height          Float         @map("height")
  weight          Float         @map("weight")
  notes           String?       @map("notes")
  posyanduName    String        @map("posyandu_name")
  visitor         Visitor       @relation(fields: [visitorId], references: [id])
  visitorId       String        @map("visitor_id")

  @@map("examination_records")
}
